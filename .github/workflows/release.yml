name: Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_pr:
    name: Build (PR sanity)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  build_matrix:
    name: Build binaries
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BIN_NAME="blitzctl"
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUT="dist/${BIN_NAME}_${GOOS}_${GOARCH}${EXT}"
          echo "Building ${OUT}"
          go build -trimpath -ldflags='-s -w' -o "$OUT" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: blitzctl-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build_matrix
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          generate_release_notes: true
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

